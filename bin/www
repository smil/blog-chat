#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);





/****************************  WebSocketServer  chat **********************************/

var WebSocketServer = require('ws').Server;
var wss = new WebSocketServer({server : server});
var clients = [];



wss.on('connection', function(ws){
  clients.push(ws);

  ws.on('message', function(msg){
    var message = JSON.parse(msg)
    console.log(message.name + ' say: ' + message.text);
    var now = new Date();
    var obj = {
      time: now.getHours() + ':' + (now.getMinutes() < 10 ? ('0'+ now.getMinutes()):now.getMinutes()),
      userName: message.name,
      text: message.text
    }
    for (var i=0; i < clients.length; i++) {
      clients[i].send(JSON.stringify(obj));
    }
  })


  ws.on('close', function(){
    var index = clients.indexOf(ws);
    clients.splice(index, 1);
  });
});





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
